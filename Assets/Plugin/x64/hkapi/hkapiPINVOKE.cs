/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace cr2 {

class hkapiPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="SWIGRegisterExceptionCallbacks_hkapi")]
    public static extern void SWIGRegisterExceptionCallbacks_hkapi(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_hkapi")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_hkapi(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_hkapi(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_hkapi(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(hkapiPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(hkapiPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="SWIGRegisterStringCallback_hkapi")]
    public static extern void SWIGRegisterStringCallback_hkapi(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_hkapi(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static hkapiPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_HKAPI_VERSION_MAJOR_get")]
  public static extern int HKAPI_VERSION_MAJOR_get();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_HKAPI_VERSION_MINOR_get")]
  public static extern int HKAPI_VERSION_MINOR_get();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_MAGIC_CR2_HAPTIC_get")]
  public static extern int MAGIC_CR2_HAPTIC_get();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_HK_INVALID_HANDLE_get")]
  public static extern int HK_INVALID_HANDLE_get();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkInitDevice")]
  public static extern global::System.IntPtr hkInitDevice(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSetCurrentDevice")]
  public static extern void hkSetCurrentDevice(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetCurrentDevice")]
  public static extern global::System.IntPtr hkGetCurrentDevice();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkReleaseDevice")]
  public static extern void hkReleaseDevice(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetRatioDegree")]
  public static extern bool hkGetRatioDegree(out float jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetRatioNewton")]
  public static extern bool hkGetRatioNewton(out float jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkIsConnected")]
  public static extern bool hkIsConnected();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkTest")]
  public static extern bool hkTest();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSerialNumber")]
  public static extern bool hkSerialNumber([global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg1, ref int jarg2);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkFirmwareVersion")]
  public static extern bool hkFirmwareVersion([global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg1, ref int jarg2);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetPacketFrequency")]
  public static extern bool hkGetPacketFrequency(out int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSetPacketFrequency")]
  public static extern bool hkSetPacketFrequency(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetRawPosition")]
  public static extern bool hkGetRawPosition(out int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSetRawPosition")]
  public static extern bool hkSetRawPosition(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkResetPosition")]
  public static extern bool hkResetPosition();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetPosition")]
  public static extern bool hkGetPosition(out float jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSetPosition")]
  public static extern bool hkSetPosition(float jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetRawCurrent")]
  public static extern bool hkGetRawCurrent(out int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetRawPositionAndCurrent")]
  public static extern bool hkGetRawPositionAndCurrent(out int jarg1, out int jarg2);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetPwm")]
  public static extern bool hkGetPwm(out int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSetPwm")]
  public static extern bool hkSetPwm(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSetPwmAsync")]
  public static extern bool hkSetPwmAsync(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetUserData")]
  public static extern bool hkGetUserData(out int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSetUserData")]
  public static extern bool hkSetUserData(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkSetUserDataAsync")]
  public static extern bool hkSetUserDataAsync(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetLastRawPosition")]
  public static extern bool hkGetLastRawPosition(out int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetLastPosition")]
  public static extern bool hkGetLastPosition(out float jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetLastRawCurrent")]
  public static extern bool hkGetLastRawCurrent(out int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetLastRawPositionAndCurrent")]
  public static extern bool hkGetLastRawPositionAndCurrent(out int jarg1, out int jarg2);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkGetLastUserData")]
  public static extern bool hkGetLastUserData(out int jarg1);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkStartExternalControlLoop")]
  public static extern bool hkStartExternalControlLoop(HKUserCallback jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkStopExternalControlLoop")]
  public static extern bool hkStopExternalControlLoop();

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkStartLatencyTest")]
  public static extern bool hkStartLatencyTest(HKUserCallback jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("hkapi_cs", EntryPoint="CSharp_hkStopLatencyTest")]
  public static extern bool hkStopLatencyTest();
}

}
