/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace cr2 {

  public delegate void HKUserCallback(global::System.IntPtr user_data);

public class hkapi {

  private static HKUserCallback cbReference;
  private static HKUserCallback MyAddReference(HKUserCallback cb) {
    cbReference = cb;
	return cb;
  }

  public static global::System.IntPtr hkInitDevice(string pConfigName) {
    global::System.IntPtr ret = hkapiPINVOKE.hkInitDevice(pConfigName);
    return ret;
  }

  public static void hkSetCurrentDevice(global::System.IntPtr hHK) {
    hkapiPINVOKE.hkSetCurrentDevice(hHK);
  }

  public static global::System.IntPtr hkGetCurrentDevice() {
    global::System.IntPtr ret = hkapiPINVOKE.hkGetCurrentDevice();
    return ret;
  }

  public static void hkReleaseDevice(global::System.IntPtr hHK) {
    hkapiPINVOKE.hkReleaseDevice(hHK);
  }

  public static bool hkGetRatioDegree(out float ratio_degree) {
    bool ret = hkapiPINVOKE.hkGetRatioDegree(out ratio_degree);
    return ret;
  }

  public static bool hkGetRatioNewton(out float ratio_newton) {
    bool ret = hkapiPINVOKE.hkGetRatioNewton(out ratio_newton);
    return ret;
  }

  public static bool hkIsConnected() {
    bool ret = hkapiPINVOKE.hkIsConnected();
    return ret;
  }

  public static bool hkTest() {
    bool ret = hkapiPINVOKE.hkTest();
    return ret;
  }

  public static bool hkSerialNumber(byte[] buffer, ref int buffer_len) {
    bool ret = hkapiPINVOKE.hkSerialNumber(buffer, ref buffer_len);
    return ret;
  }

  public static bool hkFirmwareVersion(byte[] buffer, ref int buffer_len) {
    bool ret = hkapiPINVOKE.hkFirmwareVersion(buffer, ref buffer_len);
    return ret;
  }

  public static bool hkGetPacketFrequency(out int frequency) {
    bool ret = hkapiPINVOKE.hkGetPacketFrequency(out frequency);
    return ret;
  }

  public static bool hkSetPacketFrequency(int frequency) {
    bool ret = hkapiPINVOKE.hkSetPacketFrequency(frequency);
    return ret;
  }

  public static bool hkGetRawPosition(out int pos) {
    bool ret = hkapiPINVOKE.hkGetRawPosition(out pos);
    return ret;
  }

  public static bool hkSetRawPosition(int pos) {
    bool ret = hkapiPINVOKE.hkSetRawPosition(pos);
    return ret;
  }

  public static bool hkResetPosition() {
    bool ret = hkapiPINVOKE.hkResetPosition();
    return ret;
  }

  public static bool hkGetPosition(out float pos) {
    bool ret = hkapiPINVOKE.hkGetPosition(out pos);
    return ret;
  }

  public static bool hkSetPosition(float pos) {
    bool ret = hkapiPINVOKE.hkSetPosition(pos);
    return ret;
  }

  public static bool hkGetRawCurrent(out int current) {
    bool ret = hkapiPINVOKE.hkGetRawCurrent(out current);
    return ret;
  }

  public static bool hkGetRawPositionAndCurrent(out int pos, out int current) {
    bool ret = hkapiPINVOKE.hkGetRawPositionAndCurrent(out pos, out current);
    return ret;
  }

  public static bool hkGetPwm(out int pwm) {
    bool ret = hkapiPINVOKE.hkGetPwm(out pwm);
    return ret;
  }

  public static bool hkSetPwm(int pwm) {
    bool ret = hkapiPINVOKE.hkSetPwm(pwm);
    return ret;
  }

  public static bool hkSetPwmAsync(int pwm) {
    bool ret = hkapiPINVOKE.hkSetPwmAsync(pwm);
    return ret;
  }

  public static bool hkGetUserData(out int user_data) {
    bool ret = hkapiPINVOKE.hkGetUserData(out user_data);
    return ret;
  }

  public static bool hkSetUserData(int user_data) {
    bool ret = hkapiPINVOKE.hkSetUserData(user_data);
    return ret;
  }

  public static bool hkSetUserDataAsync(int user_data) {
    bool ret = hkapiPINVOKE.hkSetUserDataAsync(user_data);
    return ret;
  }

  public static bool hkGetLastRawPosition(out int pos) {
    bool ret = hkapiPINVOKE.hkGetLastRawPosition(out pos);
    return ret;
  }

  public static bool hkGetLastPosition(out float pos) {
    bool ret = hkapiPINVOKE.hkGetLastPosition(out pos);
    return ret;
  }

  public static bool hkGetLastRawCurrent(out int current) {
    bool ret = hkapiPINVOKE.hkGetLastRawCurrent(out current);
    return ret;
  }

  public static bool hkGetLastRawPositionAndCurrent(out int pos, out int current) {
    bool ret = hkapiPINVOKE.hkGetLastRawPositionAndCurrent(out pos, out current);
    return ret;
  }

  public static bool hkGetLastUserData(out int user_data) {
    bool ret = hkapiPINVOKE.hkGetLastUserData(out user_data);
    return ret;
  }

  public static bool hkStartExternalControlLoop(HKUserCallback callback, global::System.IntPtr user_data) {
    bool ret = hkapiPINVOKE.hkStartExternalControlLoop(MyAddReference(callback), user_data);
    return ret;
  }

  public static bool hkStopExternalControlLoop() {
    bool ret = hkapiPINVOKE.hkStopExternalControlLoop();
    return ret;
  }

  public static bool hkStartLatencyTest(HKUserCallback callback, global::System.IntPtr user_data) {
    bool ret = hkapiPINVOKE.hkStartLatencyTest(MyAddReference(callback), user_data);
    return ret;
  }

  public static bool hkStopLatencyTest() {
    bool ret = hkapiPINVOKE.hkStopLatencyTest();
    return ret;
  }

  public static readonly int HKAPI_VERSION_MAJOR = hkapiPINVOKE.HKAPI_VERSION_MAJOR_get();
  public static readonly int HKAPI_VERSION_MINOR = hkapiPINVOKE.HKAPI_VERSION_MINOR_get();
  public static readonly int MAGIC_CR2_HAPTIC = hkapiPINVOKE.MAGIC_CR2_HAPTIC_get();
  public static readonly int HK_INVALID_HANDLE = hkapiPINVOKE.HK_INVALID_HANDLE_get();
}

}
